<template>
  <div class="tutorial-page">
    <text class="tutorial-title">自定义组件:</text>
    <text>{{ prop1 }}</text>
    <text>{{ prop2Object.name }}</text>
    <text>{{ upperProp1 }}</text>
    <text onclick="evtType2Emit">触发$dispatch()</text>
    <text onclick="evtType3Emit">触发$emit()</text>
  </div>
</template>

<style lang="less">
  .tutorial-page {
    flex-direction: column;
    padding-top: 20px;

    .tutorial-title {
      font-weight: bold;
    }
  }
</style>

<script>
  // 子组件
  export default {
    props: [
      'prop1',
      'prop2Object'
    ],
    data () {
      return {
        upperProp1: this.prop1
      }
    },
    onInit () {
      console.info(`外部传递的数据：`, this.prop1, this.prop2Object)

      // 监听数据变化
      this.$watch('prop1', 'watchPropsChange')
      this.$watch('prop2Object.name', 'watchPropsChange')

      // 绑定VM的自定义事件
      this.$on('evtType1', this.evtTypeHandler)
      this.$on('evtType2', this.evtTypeHandler)
    },
    /**
     * 监听数据变化，你可以对数据处理后，设值到data上
     * @param newV
     * @param oldV
     */
    watchPropsChange (newV, oldV) {
      console.info(`监听数据变化：`, newV, oldV)
      this.upperProp1 = newV && newV.toUpperCase()
    },
    evtTypeHandler (evt) {
      console.info(`子组件：事件响应: `, evt.type, evt.detail)
      // 结束事件传递
      // evt.stop()
    },
    evtType2Emit () {
      this.$dispatch('evtType2', { params: '额外参数' })
    },
    evtType3Emit () {
      this.$emit('evtType3', { params: '额外参数' })
    }
  }
</script>
