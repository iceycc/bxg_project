<import name="comp-part1" src="./part1"></import>
<import name="comp-part2" src="./part2"></import>
<import name="comp-part3" src="./part3"></import>

<template>
  <div class="tutorial-page">
    <text class="tutorial-title">页面组件：</text>
    <text>{{ data1 }}</text>
    <text>{{ data2.name }}</text>
    <text onclick="evtType1Emit">触发$broadcast()</text>

    <comp-part1 prop1="{{data1}}" prop2-object="{{data2}}" onevt-type3="evtTypeHandler"></comp-part1>

    <!-- 兄弟VM通信 -->
    <comp-part2 id="sibling1"></comp-part2>
    <comp-part3 id="sibling2"></comp-part3>
  </div>
</template>

<style lang="less">
  .tutorial-page {
    flex-direction: column;
    padding: 20px 10px;

    .tutorial-title {
      font-weight: bold;
    }
  }
</style>

<script>
  // 父组件
  export default {
    private: {
      data1: 'string',
      data2: {
        name: 'object'
      }
    },
    onInit () {
      this.$page.setTitleBar({ text: '父子组件通信' })

      // 绑定VM的自定义事件
      this.$on('evtType1', this.evtTypeHandler)
      this.$on('evtType2', this.evtTypeHandler)
    },
    evtTypeHandler (evt) {
      console.info(`父组件：事件响应: `, evt.type, evt.detail)
      // 结束事件传递
      // evt.stop()
    },
    evtType1Emit () {
      this.$broadcast('evtType1', { params: '额外参数' })
    },
    onReady () {
      setTimeout(function () {
        this.data1 = 'string2'
        this.data2.name = 'object2'
      }.bind(this), 3000)

      this.establishRef()
    },
    /**
     * 建立相互VM的引用
     */
    establishRef () {
      const siblingVm1 = this.$vm('sibling1')
      const siblingVm2 = this.$vm('sibling2')

      siblingVm1.parentVm = this
      siblingVm1.nextVm = siblingVm2
      siblingVm2.parentVm = this
      siblingVm2.previousVm = siblingVm1
    }
  }
</script>
