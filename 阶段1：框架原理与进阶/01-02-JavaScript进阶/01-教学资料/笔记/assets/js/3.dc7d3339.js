(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{162:function(t,s,a){t.exports=a.p+"assets/img/whytypes.ba5c2625.png"},166:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"flow-typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flow-typescript","aria-hidden":"true"}},[t._v("#")]),t._v(" Flow & TypeScript")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("JavaScript")]),t._v("是一种弱类型的动态语言, 且"),n("code",[t._v("JavaScript")]),t._v("具有动态类型检查的特征。")])]),t._v(" "),n("h2",{attrs:{id:"强类型和弱类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#强类型和弱类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 强类型和弱类型")]),t._v(" "),n("p",[t._v("强类型语言是指当一个变量一旦被指定了数据类型之后，如果不经过强制转换，那么他那么它就永远都是这个类型的了。")]),t._v(" "),n("p",[t._v("弱类型语言是指一个变量可以被赋值不同类型的数据。")]),t._v(" "),n("h2",{attrs:{id:"动态类型和静态类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态类型和静态类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态类型和静态类型")]),t._v(" "),n("p",[t._v("静态类型语言和动态类型语言得核心区别在于，静态类型语言("),n("code",[t._v("statically-typed languages")]),t._v(")会在编译时("),n("code",[t._v("compile time")]),t._v(")进行类型检查，而动态语言("),n("code",[t._v("dynamically-typed")]),t._v(")则是在运行时进行类型检查("),n("code",[t._v("runtime")]),t._v(")")]),t._v(" "),n("p",[t._v("当出现一个类型错误时，静态类型检查和动态类型检查的差异就凸显出来了。在静态类型语言中，类型检查发生在编译阶段。在动态类型语言中，只有在程序运行了一次的时候错误才会被发现，也就是在运行时。")]),t._v(" "),n("h2",{attrs:{id:"动态类型存在的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态类型存在的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态类型存在的问题")]),t._v(" "),n("p",[t._v("由于"),n("code",[t._v("JavaScript")]),t._v("是动态类型语言，没有编译的环节，所有的类型检查是在代码运行时进行的，这就意味着我们书写的代码中的某些错误，只能在代码运行时在会被发现。")]),t._v(" "),n("p",[t._v("比如下面这段代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("greet")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 这句代码，我们尝试去调用了obj的sayHello方法")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 在编码阶段，我们无法确定最终传进来的参数对象究竟是什么")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 只有在代码实际运行阶段，执行到本句代码的时候")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 才会发现传入的obj对象根本没有sayHello方法，最终在运行阶段报错")]),t._v("\n  o"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("sayHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'张学友'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("greet")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("再看下面这段代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/**\n * 计算指定数值除以2的结果 我们期望用户传入的参数为数值类型\n * @param {number} x  \n */")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("divideBy2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 用户在调用的时候如果传入数值，则功能正常")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("divideBy2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{attrs:{class:"token comment"}},[t._v("// 但是如果用户在调用的时候传入一个字符串，则会导致运行时错误")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// (不报错，因为JavaScript解释器会尝试纠正错误，但是结果肯定不是我们预期的)")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("divideBy2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hello World'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("当然，动态类型带来的并不只是问题，它的灵活程度和编码成本相较于静态类型的语言来讲是显而易见的。比如在Java和C#被类型限制的生活不能自理的同学，在JavaScript中你几乎可以放飞自我，为所欲为（Just a joke）。")]),t._v(" "),n("h2",{attrs:{id:"静态类型带来的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态类型带来的好处","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态类型带来的好处")]),t._v(" "),n("div",{staticStyle:{"text-align":"center"}},[n("img",{attrs:{src:a(162)}})]),t._v(" "),n("h3",{attrs:{id:"你可以尽早发现bug和错误"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#你可以尽早发现bug和错误","aria-hidden":"true"}},[t._v("#")]),t._v(" 你可以尽早发现bug和错误")]),t._v(" "),n("p",[t._v("静态类型检查允许我们在程序没有运行之前就可以确定我们所设定的确定性是否是对的。一旦有违反这些既定规则的行为，它能在运行之前就发现，而不是在运行时。")]),t._v(" "),n("p",[t._v("因为类型检查器会在你编码的时候就告诉你错误，所以这也就比你把代码交付到客户手中才发现一些错误要更方面（或者说付出更少的开发与维护成本）。")]),t._v(" "),n("h3",{attrs:{id:"提高代码的可读性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#提高代码的可读性","aria-hidden":"true"}},[t._v("#")]),t._v(" 提高代码的可读性")]),t._v(" "),n("p",[t._v("在代码中加入类型系统，可以清晰的告诉用户功能所需要的数据是什么类型的，函数的返回值是什么类型的，提升代码的可读性。")]),t._v(" "),n("h3",{attrs:{id:"减少了复杂的错误处理逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#减少了复杂的错误处理逻辑","aria-hidden":"true"}},[t._v("#")]),t._v(" 减少了复杂的错误处理逻辑")]),t._v(" "),n("p",[t._v("假设我们需要提供一个函数用来计算数组中所有数字的和")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 最基本的代码如下：")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v("  "),n("span",{attrs:{class:"token function-variable function"}},[t._v("sum")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  arr"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("forEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" v"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 可是上面的代码对于可能出现的异常没有做任何的处理")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 为了保证函数能够正常的运行，我们需要确保用户传入的参数为有效的数字数组")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 那么就需要这么做")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v("  "),n("span",{attrs:{class:"token function-variable function"}},[t._v("sum")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("arr"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Error")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Please give me arguments"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Error")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"I need Array, what you\'ve passed to me?"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("arr"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("every")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" v "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'number'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Error")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"你传进来的数组里有奇怪的东西，我要的是数字！"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  arr"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("forEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" v"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如此我们便发现，如果没有类型系统，要处理类似的问题，代码显得非常繁琐。")]),t._v(" "),n("p",[t._v("当有了类型系统之后，这样代码就不需要再写了，在我们学习完"),n("code",[t._v("flow")]),t._v("和"),n("code",[t._v("typescript")]),t._v("之后我们回过头来再看这个例子。")]),t._v(" "),n("h3",{attrs:{id:"促进更可靠的重构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#促进更可靠的重构","aria-hidden":"true"}},[t._v("#")]),t._v(" 促进更可靠的重构")]),t._v(" "),n("p",[t._v("假设要进行代码重构，我们需要将函数的某个参数进行修改，那么在之前修改的时候我们可能需要犹豫，因为指不定项目中某个地方调用没有进行修改，那么运行的时候会产生奇怪的问题。")]),t._v(" "),n("p",[t._v("而有了静态类型检测之后，类型检测会自动告诉我们修改后的代码哪里存在问题，我们只需要按照提示修复即可。")]),t._v(" "),n("h3",{attrs:{id:"增强ide的功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#增强ide的功能","aria-hidden":"true"}},[t._v("#")]),t._v(" 增强IDE的功能")]),t._v(" "),n("p",[t._v("静态类型会增强IDE的功能，提升开发效率。")]),t._v(" "),n("h2",{attrs:{id:"静态类型存在的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态类型存在的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态类型存在的问题")]),t._v(" "),n("ol",[n("li",[t._v("会增加代码量")]),t._v(" "),n("li",[t._v("需要花时间掌握类型")]),t._v(" "),n("li",[t._v("可能会降低开发效率")])]),t._v(" "),n("h2",{attrs:{id:"如何在javascript开发中使用静态类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何在javascript开发中使用静态类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何在JavaScript开发中使用静态类型")]),t._v(" "),n("ol",[n("li",[t._v("Flow: FaceBook的开源技术")]),t._v(" "),n("li",[t._v("TypeScript： 微软公司开发的语言")])])])}],r=a(0),e=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);e.options.__file="README.md";s.default=e.exports}}]);